<< 필터 Exception >>
    - 서블릿은 다음 2가지 방식으로 예외 처리를 지원한다.
        1. Exception
           : 예외가 발생할 경우 WAS 까지 전파된다.

        2. response.sendError(HTTP 상태 코드, 오류 메시지)
          : 호출한다고 당장 예외가 발생하는 것은 아니지만, Servlet 컨테이너에게 오류가 발생했다는 점을 전달할 수 있다.
          : WAS 에 전달된 예외가 있을경우 오류 페이지 정보를 확인한다.
          : 그리고 오류 페이지를 다시 요청한다 (서버내부) -> 필터
          : 즉, 필터 서블릿 인터셉터 컨트롤러가 모두 다시 호출된다.

    - 위 같이 에러를 처리할 경우, 필터와 인터셉터가 한번 더 호출되는 것은 매우 비효율적이다.
      이를 위해 스프링은 dispatcherType 이라는 추가 정보를 제공한다.
      맨 처음 요청이 왔을 때는 dispatcherType=REQUEST 이다.
      그리고 에러가 났을 경우, dispatcherType = ERROR


<< 인터셉터 Exception >>
    - 인터셉터로 처리했을 경우, WAS -> filter(x) -> dispatchServlet(o) -> Interceptor(x) -> Controller(o) -> View


<< 스프링 부트 Exception >>
    - 모든 오류는 기본적으로 /error 를 호출하게 된다.
    - BasicErrorController 라는 스프링 컨트롤러가 자동으로 등록되었기 떄문이다.
    - 뷰 선택 우선순위
      : BasicErrorController 의 처리 순서

    1. 뷰 템플릿
      : resources/templates/error/500.html
      : resources/templates/error/5xx.html
    2. 정적 리소스( static , public )
      : resources/static/error/400.html
      : resources/static/error/404.html
      : resources/static/error/4xx.html
    3. 적용 대상이 없을 때 뷰 이름( error )
      : resources/templates/error.html